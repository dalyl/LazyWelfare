 
var ViewScript = {}

ViewScript.RequestPartial = function (parent,type,host, path, args,after) {
    var afterFunc = (after && typeof (after) === "function") ? after.toString() : "";
    javascript: PartialScript.RequestPartial(parent, type,host, path, args, afterFunc);
}

ViewScript.ReplacePartial = function (parent, content) {
    content = HtmlUtil.htmlDecode(content);
    $(parent).html(content);
}

ViewScript.AppendPartial = function (parent, content) {
    content = HtmlUtil.htmlDecode(content);
    $(parent).append(content);
}


ViewScript.Alert = function (message)
{
    javascript: AndroidScript.ShowToast(message);
}

ViewScript.CommandInvoke = function(btn) {
    var name = $(btn).text();
    var service = $(btn).data("service");
    var uri = $(btn).data("Uri");
    var json = "{ 'Name':'" + (name ? name : "") + "','Service':'" + (service ? service : "") + "','Uri':'" + (uri ? uri : "") + "' }";
    javascript: BuinessScript.CommandSumbit(json);
}


var HtmlUtil = {
    /*1.用浏览器内部转换器实现html转码*/
    htmlEncode: function (html) {
        //1.首先动态创建一个容器标签元素，如DIV
        var temp = document.createElement("div");
        //2.然后将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)
        (temp.textContent != undefined) ? (temp.textContent = html) : (temp.innerText = html);
        //3.最后返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了
        var output = temp.innerHTML;
        temp = null;
        return output;
    },
    /*2.用浏览器内部转换器实现html解码*/
    htmlDecode: function (text) {
        //1.首先动态创建一个容器标签元素，如DIV
        var temp = document.createElement("div");
        //2.然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)
        temp.innerHTML = text;
        //3.最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。
        var output = temp.innerText || temp.textContent;
        temp = null;
        return output;
    }
};