#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MicroBluer.AndroidMobile.Views.Partials
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "4.10.10.1")]
public partial class HostsView : HostsViewBase
{

#line hidden

#line 1 "HostsView.cshtml"
public List<MicroBluer.AndroidMobile.Models.HostModel> Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("    <div");

WriteLiteral(" class=\"line-section\"");

WriteLiteral(">\r\n        <ul");

WriteLiteral(" class=\"list-group\"");

WriteLiteral(">\r\n");


#line 4 "HostsView.cshtml"
            

#line default
#line hidden

#line 4 "HostsView.cshtml"
             foreach (var one in Model)
            {


#line default
#line hidden
WriteLiteral("                <li");

WriteLiteral(" class=\"list-group-item main-item\"");

WriteLiteral(">\r\n                    <span");

WriteLiteral(" class=\"glyphicon glyphicon-cloud\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral("></span>\r\n                    <span>");


#line 8 "HostsView.cshtml"
                     Write(one.Name);


#line default
#line hidden
WriteLiteral("</span>\r\n                </li>\r\n");

WriteLiteral("                <li");

WriteLiteral(" class=\"list-group-item command-item \"");

WriteLiteral(" data-guid=\"");


#line 10 "HostsView.cshtml"
                                                                Write(one.Domain);


#line default
#line hidden
WriteLiteral("\"");

WriteLiteral(">\r\n                    <span");

WriteLiteral(" class=\"command-item-set orangered\"");

WriteLiteral(">设置</span>\r\n                    <span");

WriteLiteral(" class=\"command-item-delete red\"");

WriteLiteral(">删除</span>\r\n                    <span");

WriteLiteral(" class=\"command-item-eidt blue\"");

WriteLiteral(">编辑</span>\r\n                </li>\r\n");


#line 15 "HostsView.cshtml"
            }


#line default
#line hidden
WriteLiteral("        </ul>\r\n    </div>\r\n\r\n    <div");

WriteLiteral(" class=\"line-section\"");

WriteLiteral(">\r\n        <ul");

WriteLiteral(" class=\"list-group\"");

WriteLiteral(">\r\n            <li");

WriteLiteral(" class=\"list-group-item command-item-add\"");

WriteLiteral(">\r\n                <span");

WriteLiteral(" class=\"glyphicon glyphicon-plus\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral("></span>\r\n                <span>手动添加</span>\r\n            </li>\r\n            <li");

WriteLiteral("  class=\"list-group-item command-item-scan\"");

WriteLiteral(" data-hybrid=\"servicehost\"");

WriteLiteral(">\r\n                <span");

WriteLiteral(" class=\"glyphicon glyphicon-qrcode\"");

WriteLiteral(" aria-hidden=\"true\"");

WriteLiteral(@"></span>
                <span>扫一扫</span>
            </li>
        </ul>
    </div>
    <script>
    $(function () {
        $("".command-item"").each(function () {
            var width = $(this).width();
            var count = $(""span"", this).length;
            $(""span"", this).width((width - count) / count); 
        });
        $("".command-item"").css(""display"", ""none"");
        $("".main-item"").click(function () {
            var dispaly = $(this).next().css(""display"");
            $("".command-item"").css(""display"", ""none"");
            if (dispaly == ""none"") {
                $(this).next().fadeIn();
            }
        });

        $("".command-item-add"").click(function () {
            ViewScript.RequestPartial('#MainContent',""Replace"" , '");


#line 48 "HostsView.cshtml"
                                                             Write(HostEditView.Partial.Host);


#line default
#line hidden
WriteLiteral("\', \'");


#line 48 "HostsView.cshtml"
                                                                                           Write(HostEditView.Partial.Path);


#line default
#line hidden
WriteLiteral(@"', """");
        });

        $("".command-item-scan"").click(function () {
            javascript: BuinessScript.ScanHost();
        });

        $("".command-item-set"").click(function () {
            var guid = $(this).parent().data(""guid"");
            var result = false;
            javascript: result = BuinessScript.SetHost(guid);
            if (result) {
                ViewScript.RequestPartial('#MainContent',""Replace"" , '");


#line 60 "HostsView.cshtml"
                                                                 Write(HostIndexView.Partial.Host);


#line default
#line hidden
WriteLiteral("\', \'");


#line 60 "HostsView.cshtml"
                                                                                                Write(HostIndexView.Partial.Path);


#line default
#line hidden
WriteLiteral(@"');
            }
        });
        $("".command-item-delete"").click(function () {
            var guid = $(this).parent().data(""guid"");
            var result = false;
            javascript: result = BuinessScript.DeleteHost(guid);
            if (result) {
                ViewScript.RequestPartial('#MainContent', ""Replace"", '");


#line 68 "HostsView.cshtml"
                                                                 Write(HostsView.Partial.Host);


#line default
#line hidden
WriteLiteral("\', \'");


#line 68 "HostsView.cshtml"
                                                                                            Write(HostsView.Partial.Path);


#line default
#line hidden
WriteLiteral("\');\r\n            }\r\n        });\r\n        $(\".command-item-eidt\").click(function (" +
") {\r\n            var guid = $(this).parent().data(\"guid\");\r\n            ViewScri" +
"pt.RequestPartial(\'#MainContent\', \"Replace\",\'");


#line 73 "HostsView.cshtml"
                                                            Write(HostEditView.Partial.Host);


#line default
#line hidden
WriteLiteral("\', \'");


#line 73 "HostsView.cshtml"
                                                                                          Write(HostEditView.Partial.Path);


#line default
#line hidden
WriteLiteral("\', guid);\r\n        });\r\n    })\r\n    </script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class HostsViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
