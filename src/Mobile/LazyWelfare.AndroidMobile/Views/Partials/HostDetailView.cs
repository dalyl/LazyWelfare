#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LazyWelfare.AndroidMobile.Views.Partials
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "4.10.0.442")]
public partial class HostDetailView : HostDetailViewBase
{

#line hidden

#line 1 "HostDetailView.cshtml"
public LazyWelfare.AndroidMobile.Models.HostModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<div");

WriteLiteral(" class=\"panel panel-default\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" class=\"panel-heading\"");

WriteLiteral(">\r\n        <h3");

WriteLiteral(" class=\"panel-title\"");

WriteLiteral(">服务详情</h3>\r\n    </div>\r\n    <div");

WriteLiteral(" class=\"panel-body\"");

WriteLiteral(">\r\n        <form");

WriteLiteral(" class=\"HostModelForm\"");

WriteLiteral(">\r\n            <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"Domain\"");

WriteAttribute ("value", " value=\"", "\""

#line 9 "HostDetailView.cshtml"
               , Tuple.Create<string,object,bool> ("", Model.Domain

#line default
#line hidden
, false)
);
WriteLiteral(" />\r\n            <div");

WriteLiteral(" class=\"form-group\"");

WriteLiteral(">\r\n                <label");

WriteLiteral(" class=\"control-label\"");

WriteLiteral(">服务名称</label>\r\n                <div");

WriteLiteral(" class=\"controls\"");

WriteLiteral(">\r\n                    <input");

WriteLiteral(" name=\"Name\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"名称\"");

WriteLiteral(" class=\"form-control\"");

WriteAttribute ("value", " value=\"", "\""

#line 13 "HostDetailView.cshtml"
                                                         , Tuple.Create<string,object,bool> ("", Model.Name

#line default
#line hidden
, false)
);
WriteLiteral(" autocomplete=\"off\"");

WriteLiteral(">\r\n                    <p");

WriteLiteral(" class=\"help-block\"");

WriteLiteral(">服务速记名称</p>\r\n                </div>\r\n            </div>\r\n            <div");

WriteLiteral(" class=\"form-group\"");

WriteLiteral(">\r\n                <label");

WriteLiteral(" class=\"control-label\"");

WriteLiteral(">服务地址</label>\r\n                <div");

WriteLiteral(" class=\"controls\"");

WriteLiteral(">\r\n                    <input");

WriteLiteral(" name=\"Address\"");

WriteLiteral(" type=\"text\"");

WriteLiteral(" placeholder=\"地址\"");

WriteLiteral(" class=\"form-control\"");

WriteAttribute ("value", " value=\"", "\""

#line 20 "HostDetailView.cshtml"
                                                            , Tuple.Create<string,object,bool> ("", Model.Address

#line default
#line hidden
, false)
);
WriteLiteral(" autocomplete=\"off\"");

WriteLiteral(">\r\n                    <p");

WriteLiteral(" class=\"help-block\"");

WriteLiteral(">http://*****</p>\r\n                </div>\r\n            </div>\r\n        </form>\r\n " +
"       <div");

WriteLiteral(" class=\"form-group\"");

WriteLiteral(">\r\n            <!-- Button -->\r\n            <div");

WriteLiteral(" class=\"controls\"");

WriteLiteral(">\r\n                <button");

WriteLiteral(" class=\"btn btn-success HostModelSave\"");

WriteLiteral(@">保存</button>
            </div>
        </div>
    </div>
</div>


<script>
    $(function () {
        $("".HostModelSave"").click(function () {
            var model = $("".HostModelForm"").serialize();
            var result = false;
            javascript: result = BuinessScript.SaveHost(model);
            if (result) {
                 ViewScript.PartialLoad('#MainContent', '");


#line 42 "HostDetailView.cshtml"
                                                    Write(HostsView.Partial.Host);


#line default
#line hidden
WriteLiteral("\', \'");


#line 42 "HostDetailView.cshtml"
                                                                               Write(HostsView.Partial.Path);


#line default
#line hidden
WriteLiteral("\');\r\n            }\r\n        });\r\n    })\r\n</script>");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class HostDetailViewBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
